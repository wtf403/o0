<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>o0</title>
    <link rel="stylesheet" href="index.css" />
  </head>
  <body>
    <div>
      <% for (let i = 1; i <= 9; i++) {
           // Compute "prev" and "next" by wrapping around:
           let prev = (i === 1) ? 9 : (i - 1);
           let next = (i === 9) ? 1 : (i + 1);
      %>
        <div class="lightbox-container">
          <a href="#" class="lightbox" id="<%= i %>">
            <section class="carousel">
              <ol class="viewport">
                <li tabindex="0" class="slide">
                  <div class="snapper">
                    <img 
                      src="assets/screenshots/<%= i %>.png" 
                      alt="Screenshot <%= i %>" 
                    />
                  </div>
                </li>
              </ol>
            </section>
          </a>
          <a href="#<%= prev %>" class="prev" aria-label="Previous slide">&#10094;</a>
          <a href="#<%= next %>" class="next" aria-label="Next slide">&#10095;</a>
        </div>
      <% } %>
    </div>

    <main class="main">
      <svg 
        class="noise-bg"
        viewBox="0 0 400 200"
        preserveAspectRatio="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <filter id="noiseFilter">
          <feTurbulence 
            type="fractalNoise"
            baseFrequency="2.5"
            numOctaves="5"
            stitchTiles="stitch"
          >
            <animate 
              attributeName="seed" 
              from="0"
              to="100"
              dur="12s"
              repeatCount="indefinite"
            />
          </feTurbulence>
        </filter>
        <rect width="100%" height="100%" filter="url(#noiseFilter)" />
      </svg>

      <div class="bg">
        <!-- Example: repeating nested marquee for each image -->
        <% for (let i = 1; i <= 9; i++) { 
            const outerDirections = ['up', 'down'];
            const innerDirections = ['left', 'right'];
            const scrollAmounts = [3, 5];
            const randomOuterDir = outerDirections[Math.floor(Math.random() * outerDirections.length)];
            const randomInnerDir = innerDirections[Math.floor(Math.random() * innerDirections.length)];
            const randomOuterScroll = scrollAmounts[Math.floor(Math.random() * scrollAmounts.length)];
            const randomInnerScroll = scrollAmounts[Math.floor(Math.random() * scrollAmounts.length)];
        %>
          <!-- <marquee 
            class="marquee" 
            scrollamount="<%= randomOuterScroll %>"
            behavior="alternate"
            direction="<%= randomOuterDir %>"
          >
            <marquee
              scrollamount="<%= randomInnerScroll %>"
              behavior="alternate"
              direction="<%= randomInnerDir %>"
            >
              <a href="#<%= i %>">
                <img
                  width="256px"
                  height="256px"
                  class="zoom-in"
                  src="assets/screenshots/<%= i %>.png"
                  alt="Screenshot <%= i %>"
                />
              </a>
            </marquee>
          </marquee> -->
        <% } %>
      </div>

      <section class="logo-section">
        <picture class="logo" transcription="/o o&upsilon;/">
          <source
            class="logo-img"
            srcset="/assets/light.png"
            media="(prefers-color-scheme: dark)"
          />
          <img
            class="logo-img"
            src="/assets/dark.png"
            alt="o0 logo"
          />
        </picture>
        <a 
          class="download" 
          type="download" 
          href="https://apps.apple.com/"
        >
          download ï£¿
        </a>
      </section>
    </main>
  </body>
  <script>
    const bg = document.querySelector('.bg');
    const comments = Array.from(bg.childNodes)
      .filter(node => node.nodeType === 8);

    let currentIndex = 0;
    
    function uncommentNext() {
      if (currentIndex >= comments.length) return;
      
      const comment = comments[currentIndex];
      const htmlContent = comment.textContent;
      const newElement = document.createElement('div');
      newElement.innerHTML = htmlContent;
      
      comment.parentNode.replaceChild(newElement.firstElementChild, comment);
      currentIndex++;
      
      if (currentIndex < comments.length) {
        setTimeout(uncommentNext, 1000);
      }
    }
    setTimeout(uncommentNext, 1000);
  </script>
</html>

